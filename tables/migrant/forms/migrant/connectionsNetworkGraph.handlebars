<style>
table.linked-table{
	display:none;
}
div.odk-header-back-btn{
	/*display:none;*/
}

.odk-next-btn{
	/*float: right;*/

}

#languagePopup .btn-group-vertical>.btn, #optionsPopup .btn-group-vertical>.btn, #confirmExitPopup .btn-group-vertical>.btn{
	/*width: 92%;*/
}

svg{
	margin-top:25px;
	display:block;
	height:650px;
	width:650px;
}

/* ------------------------------------------------------- */
/* ------------------- node attributes ------------------- */
/* ------------------------------------------------------- */
.nodes circle {
    stroke-width: 1.5;
    stroke: gray;
    fill:white;
}

/* selection */
.nodes g.active circle{
    stroke-width: 1.5;
    stroke: gray;
    fill:pink;
}

/* ------------------- actor general ------------------- */
.nodes g[data-previous-migration="yes"] circle{}
.nodes g[data-previous-migration="no"] circle{}

/* ------------------- social - nonBroker general ------------------- */
.nodes g[data-type="nonBroker"] circle{}
.nodes g[data-type="nonBroker"][data-migrated-together="yes"] circle{}
.nodes g[data-type="nonBroker"][data-migrated-together="no"] circle{}
.nodes g[data-type="nonBroker"][data-previous-broker="yes"] circle{}
.nodes g[data-type="nonBroker"][data-previous-broker="no"] circle{}

/* ------------------- broker general ------------------- */
.nodes g[data-type="employer"] circle[data-broker="true"],
.nodes g[data-type="broker"] circle[data-broker="true"]{
    stroke-width:0;
}


/* ------------------- recruiter general ------------------- */
.nodes g[data-type="employer"][data-previousRecruiter="yes"] circle[data-broker="true"],
.nodes g[data-type="broker"][data-previousRecruiter="yes"] circle[data-broker="true"]{
    stroke-opacity: 0.25;
    stroke-width:7;
}


/* ------------------- smuggler or transporter general ------------------- */
.nodes g[data-type="employer"][data-previousSmugglerOrTransporter="yes"] circle[data-broker="true"],
.nodes g[data-type="broker"][data-previousSmugglerOrTransporter="yes"] circle[data-broker="true"]{
    stroke-opacity: 0.25;
    stroke-width:7;
}


/* ------------------- broker for migrant ------------------- */
.nodes g[data-type="employer"][data-brokerForMigrant="yes"] circle[data-broker="true"],
.nodes g[data-type="broker"][data-brokerForMigrant="yes"] circle[data-broker="true"]{
    stroke-opacity: 0.85;
    stroke-width:7;
}


/* ------------------- smuggler or transporter for migrant ------------------- */
.nodes g[data-type="employer"][data-smugglerOrTransporterForMigrant="yes"] circle[data-broker="true"],
.nodes g[data-type="broker"][data-smugglerOrTransporterForMigrant="yes"] circle[data-broker="true"]{
    stroke-opacity: 0.85;
    stroke-width:7;
}


/* ------------------- trafficker for migrant ------------------- */
.nodes g[data-type="employer"][data-traffickerForMigrant="yes"] circle[data-broker="true"],
.nodes g[data-type="broker"][data-traffickerForMigrant="yes"] circle[data-broker="true"]{
    stroke-opacity: 0.85;
    stroke-width:7;
}

/* ------------------- kozelay for migrant ------------------- */
.nodes g[data-type="employer"][data-kwoswungForMigrant="yes"] circle[data-broker="true"],
.nodes g[data-type="broker"][data-kwoswungForMigrant="yes"] circle[data-broker="true"]{
    stroke-opacity: 0.85;
    stroke-width:7;
}


/* ------------------- agent for migrant ------------------- */
.nodes g[data-type="employer"][data-agentForMigrant="yes"] circle[data-broker="true"],
.nodes g[data-type="broker"][data-agentForMigrant="yes"] circle[data-broker="true"]{
    stroke-opacity: 0.85;
    stroke-width:7;
}


/* ------------------- recruiter agent for migrant ------------------- */
.nodes g[data-type="employer"][data-recruiterAgentForMigrant="yes"] circle[data-broker="true"],
.nodes g[data-type="broker"][data-recruiterAgentForMigrant="yes"] circle[data-broker="true"]{
    stroke-opacity: 1;
    stroke-width:7;
}

/* ------------------- liscened recruiter agent for migrant ------------------- */

/* ------------------- employer general ------------------- */
.nodes g[data-type="employer"] circle[data-employer="true"],
.nodes g[data-employer="true"] circle[data-employer="true"],
.nodes g[data-firstEmployer="true"] circle[data-employer="true"]{
    stroke-opacity:0.6;
    stroke-width:10;
    stroke:navy;
}

/* ------------------- general employer for migrant ------------------- */
.nodes g[data-type="employer"][data-employer="yes"] circle[data-employer="true"]{
    stroke-opacity: 0.25;
}
/* ------------------- first employer for migrant ------------------- */
.nodes g[data-type="employer"][data-firstEmployer="yes"] circle[data-employer="true"]{
    stroke-opacity: 0.85;
}

/* ------------------- migrant ------------------- */
.nodes g[data-type="migrant"] circle{
    fill:#ffe5b5;
}


/* ------------------------------------------------------- */
/* ------------------- link attributes ------------------- */
/* ------------------------------------------------------- */


.links line{
	stroke:gray;
}

/* ------------------- payment - positive ------------------- */
/* make paid dark green and loan light green  */
.links g[data-paidMigrantExpenses="yes"] line[data-payment="true"][data-paidMigrantExpenses="yes"]{
    fill:green;
    stroke:green;
    opacity:0.5;
    stroke-width: 7;
}
.links g[data-loanedMigrantExpenses="yes"] line[data-payment="true"][data-loanedMigrantExpenses="yes"]{
    fill:green;
    stroke:green;
    opacity:0.25;
    stroke-width: 7;
}

/* ------------------- payment - negative ------------------- */
/* debt dark red and charged light red  */

.links g[data-migrantDebt="yes"] line[data-payment="true"][data-migrantDebt="yes"]{
    fill:red;
    stroke:red;
    opacity:0.5;
    stroke-width:7;
}

.links g[data-chargedMigrantExpenses="yes"] line[data-payment="true"][data-chargedMigrantExpenses="yes"]{
    fill:red;
    stroke:red;
    opacity:0.25;
    stroke-width:7;
}
/* ------------------------------------------------------- */
/* ------------------- general styles ------------------- */
/* ------------------------------------------------------- */

text {
  	font-size: 12px;
	stroke:gray;
	fill:gray;
	/*font-family: monospace;*/
}

button.timeStage{
    border: #ccc solid 0.25em;
    margin: 10px;
    padding: 0.5em;
    border-radius: 1em;
    background-color: white;
    width: 16%;
    height: 4em;
    color: gray;
    font-size: 0.75em;
}
button.timeStage.active{
    border: gray solid 0.25em;
    background-color: #ffe5b5;
}


.links.timeStage.active{
    background-color:#ccc;
}
.probe{color:gray;font-size:18px;margin:1em 0;}
.addInstance{
    background-color:#ffe5b5;
    margin:1em 0;
}

 button.networkConnection{
     border: #ccc solid 0.25em;
     margin: 10px;
     padding: 0.5em;
     border-radius: 1em;
     background-color: white;
     min-width: 15em;
     height: 5em;
     color: gray;
     font-size: 0.75em;
 }
 button.networkConnection.active{
     border: gray solid 0.25em;
     background-color: #ffe5b5;
 }

</style>

<svg width="650" height="650"></svg>

<!-- relationships	acquintance	Acquaintance	အသိအကျွမ်း -->
<button type="button" class="networkConnection" data-connection="acquintances" name="decision">Acquaintances</button>
<!-- relationships	friend	Friend	မိတ်ဆွေ -->
<button type="button" class="networkConnection" data-connection="friends" name="how">Friends</button>
<!-- relationships	close_friend	Close friend	ရင်းနှီးသော မိတ်ဆွေ -->
<button type="button" class="networkConnection" data-connection="close friend" name="coordination">Close Friend</button>
<!-- relationships	family	Family	မိသားစု -->
<button type="button" class="networkConnection" data-connection="family" name="coordination">Family</button>
<!-- relationships	coworkers_colleagues coworkers/colleagues	အလုပ်အတူလုပ်ကိုင်သူအားလုံး/ရာထူးတူလုပ်ဖော်ကိုင်ဖက်များ -->
<button type="button" class="networkConnection" data-connection="coworkers or colleagues" name="coordination">Coworkers</button>
<!-- relationships	employer_employee	employer/employee	အလုပ်ရှင်/လုပ်သား -->
<button type="button" class="networkConnection" data-connection="employer and employee" name="coordination">Employer / Employee</button>



<script>

console.log('viz');

var migrantResult;
var migrant = "9998";
var actorResultSet = {};
var connectionResultSet = {};
var dataset = {nodes:[],links:[]};

var d3version3;
var d3version4;
var svg;
var zoomLayer;
var color;
var simulation;

var link;
var paymentsToMigrants;
var paymentsFromMigrants;
var node;
var migrants;
var nonBrokers;
var brokers;
var employers;

var circles;
var brokeRings;
var employerBrokeRings;
var employerRings;
var lables;


var actorsCtxt = {
    failure: function(error) {console.log('error: '+error.message)},  
    success: function(result) {
        actorResultSet = result;
        var numOfActors = actorResultSet.getCount();
        console.log(numOfActors + " actors in " + [migrant] + "'s network");
		
		/* DATASET BUILDING NODES*/
		addActorsToNetwork(actorResultSet,dataset);

		// add actor's connections to network
        odkData.arbitraryQuery(
        	'connection',
        	'select * from connection where migrantId = ?',
        	[migrant],
        	null,
        	null,
        	connectionsCtxt.success,
        	connectionsCtxt.failure
        );
    }
};


var actorCtxt= {
    failure: function(error) {console.log('error: '+error.message)},  
    success: function(result) { console.log('success: '+ result)}
};



function addActorsToNetwork(actors,network){
	// process network actors
	// ===================================================================================================
    for(var i = 0; i < actors.getCount(); i++){

        // social actor (default)
        var actorType = "nonBroker";
        
        // broker actor (general)
        if(actors.getData(i,"previousRecruiter") == "yes"
			|| actors.getData(i,"brokerForMigrant") == "yes"
			|| actors.getData(i,"agentForMigrant") == "yes"
			|| actors.getData(i,"recruiterAgentForMigrant") == "yes"
			|| actors.getData(i,"previousSmugglerOrTransporter") == "yes"
			|| actors.getData(i,"smugglerOrTransporterForMigrant") == "yes"
			|| actors.getData(i,"traffickerForMigrant") == "yes"
			|| actors.getData(i,"kwoswungForMigrant") == "yes"
        ){
        	actorType="broker"
    	}

        // employer actor
        if(actors.getData(i,'employer') == "yes"|| actors.getData(i,"firstEmployer") == "yes"){actorType="employer"}
        
		// add actor to network
        network.nodes.push({

			"chargedMigrantExpenses":actors.getData(i,"chargedMigrantExpenses"),
			"paidMigrantExpenses":actors.getData(i,"paidMigrantExpenses"),
			"loanedMigrantExpenses":actors.getData(i,"loanedMigrantExpenses"),
			"migrantDebt":actors.getData(i,"migrantDebt"),

	
			"previousRecruiter":actors.getData(i,"previousRecruiter"),
			"brokerForMigrant":actors.getData(i,"brokerForMigrant"),

			"agentForMigrant":actors.getData(i,"agentForMigrant"),
			"recruiterAgentForMigrant":actors.getData(i,"recruiterAgentForMigrant"),
			"traffickerForMigrant":actors.getData(i,"traffickerForMigrant"),
			"kwoswungForMigrant":actors.getData(i,"kwoswungForMigrant"),
			

			"firstEmployer":actors.getData(i,"firstEmployer"),
			"employer":actors.getData(i,"employer"),
			

        	"id":actors.getData(i,'_id'),
        	"type":actorType,
			"name":actors.getData(i,"name"),
			"age":actors.getData(i,"age"),
			"remittances":actors.getData(i,"remittances"),
			"coMigration":actors.getData(i,"coMigration"),
			"ageApproximate":actors.getData(i,"ageApproximate"),
			"ageBirthYearMyanmar":actors.getData(i,"ageBirthYearMyanmar"),
			"ageBirthYearThailand":actors.getData(i,"ageBirthYearThailand"),
			"ageBirthYearEnglish":actors.getData(i,"ageBirthYearEnglish"),
			"gender":actors.getData(i,"gender"),
			"relationshipToMigrant":actors.getData(i,"relationshipToMigrant"),
			"personalMattersDiscussionFrequency":actors.getData(i,"personalMattersDiscussionFrequency"),
			"relationalWealth":actors.getData(i,"relationalWealth"),
			"firstSuggestion":actors.getData(i,"firstSuggestion"),
			"neededPermission":actors.getData(i,"neededPermission"),
			"wantedBlessing":actors.getData(i,"wantedBlessing"),
			"finalDecision":actors.getData(i,"finalDecision"),
			"encouragement":actors.getData(i,"encouragement"),
			"discouragement":actors.getData(i,"discouragement"),
			"migrationModeller":actors.getData(i,"migrationModeller"),
			"refuseReaction":actors.getData(i,"refuseReaction"),
			"generalInformation":actors.getData(i,"generalInformation"),
			"arrangedMigration":actors.getData(i,"arrangedMigration"),
			"arrangedDestination":actors.getData(i,"arrangedDestination"),
			"arrangedWork":actors.getData(i,"arrangedWork"),
			"arrangedContractBefore":actors.getData(i,"arrangedContractBefore"),
			"arrangedContractAfter":actors.getData(i,"arrangedContractAfter"),
			"arrangedTravelDocumentation":actors.getData(i,"arrangedTravelDocumentation"),
			"arrangedTransportation":actors.getData(i,"arrangedTransportation"),
			"arrangedAccommodation":actors.getData(i,"arrangedAccommodation"),
			"predepartureDiscussionPersonInThailand":actors.getData(i,"predepartureDiscussionPersonInThailand"),
			"honestFeelings":actors.getData(i,"honestFeelings"),
			"alsoAttendedTrainings":actors.getData(i,"alsoAttendedTrainings"),
			"inTransitHelp":actors.getData(i,"inTransitHelp"),
			"unnamedImportantPlanners":actors.getData(i,"unnamedImportantPlanners"),
			"myanmarNational":actors.getData(i,"myanmarNational"),
			"thailandNational":actors.getData(i,"thailandNational"),
			"sameEthnicity":actors.getData(i,"sameEthnicity"),
			"migratedThailandBeforeMigrant":actors.getData(i,"migratedThailandBeforeMigrant"),
			"migratedThailandAfterMigrant":actors.getData(i,"migratedThailandAfterMigrant"),
			"currentlyInThailand":actors.getData(i,"currentlyInThailand"),
			"arrangedForOthers":actors.getData(i,"arrangedForOthers"),
			"seekHelpAgain":actors.getData(i,"seekHelpAgain"),
			"mostValuableHelp":actors.getData(i,"mostValuableHelp"),
			"causedProblems":actors.getData(i,"causedProblems"),
			"expectationsDestination":actors.getData(i,"expectationsDestination"),
			"expectationsWorkType":actors.getData(i,"expectationsWorkType"),
			"expectationsJobSite":actors.getData(i,"expectationsJobSite"),
			"expectationsCompanyName":actors.getData(i,"expectationsCompanyName"),
			"expectationsLivingArrangements":actors.getData(i,"expectationsLivingArrangements"),
			"expectationsAmountPaid":actors.getData(i,"expectationsAmountPaid"),
			"expectationsOftenPaid":actors.getData(i,"expectationsOftenPaid"),
			"expectationsWorkingHours":actors.getData(i,"expectationsWorkingHours"),
			"expectationsOvertimeHours":actors.getData(i,"expectationsOvertimeHours"),
			"expectationsOvertimePay":actors.getData(i,"expectationsOvertimePay"),
			"expectationsTimeOff":actors.getData(i,"expectationsTimeOff"),
			"expectationsLawfulDeductions":actors.getData(i,"expectationsLawfulDeductions"),
			"expectationsForeignWorkerRights":actors.getData(i,"expectationsForeignWorkerRights"),
			"expectationsContractDuration":actors.getData(i,"expectationsContractDuration"),
			"expectationsEarlyTerminationPenalties":actors.getData(i,"expectationsEarlyTerminationPenalties"),
			"expectationsRecruitmentFees":actors.getData(i,"expectationsRecruitmentFees"),
			"expectationsTransportationCosts":actors.getData(i,"expectationsTransportationCosts"),
			"expectationsTransportationPlan":actors.getData(i,"expectationsTransportationPlan"),
			"expectationsTransportationDocumentationPlan":actors.getData(i,"expectationsTransportationDocumentationPlan"),
			"expectationsTransportationDocumentationCosts":actors.getData(i,"expectationsTransportationDocumentationCosts"),
			"deductions":actors.getData(i,"deductions"),
			"lockedInRoom":actors.getData(i,"lockedInRoom"),
			"refusedOvertimePay":actors.getData(i,"refusedOvertimePay"),
			"limitedBreaks":actors.getData(i,"limitedBreaks"),
			"workWhenSick":actors.getData(i,"workWhenSick"),
			"dangerousWork":actors.getData(i,"dangerousWork"),
			"workedLonger":actors.getData(i,"workedLonger"),
			"restrictedMovement":actors.getData(i,"restrictedMovement"),
			"threatenNoPay":actors.getData(i,"threatenNoPay"),
			"threatenDismissal":actors.getData(i,"threatenDismissal"),
			"takenPassport":actors.getData(i,"takenPassport"),
			"threatenInjury":actors.getData(i,"threatenInjury"),
			"damagedBelongings":actors.getData(i,"damagedBelongings"),
			"slappedHitThrowSomething":actors.getData(i,"slappedHitThrowSomething"),
			"pushedKickedBeaten":actors.getData(i,"pushedKickedBeaten"),
			"tiedUpChoked":actors.getData(i,"tiedUpChoked"),
			"threatenWeaponUse":actors.getData(i,"threatenWeaponUse"),
			"burnYou":actors.getData(i,"burnYou"),
			"forcedSex":actors.getData(i,"forcedSex"),
			"forcedSubstances":actors.getData(i,"forcedSubstances"),

			"previousSmugglerOrTransporter":actors.getData(i,"previousSmugglerOrTransporter"),
			"smugglerOrTransporterForMigrant":actors.getData(i,"smugglerOrTransporterForMigrant")


        });

    	// add initial link migrant <-> actor
        network.links.push({
        	"source": migrant,
        	"target":actors.getData(i,'_id'),
        	"paidMigrantExpenses":actors.getData(i,'paidMigrantExpenses'),
        	"loanedMigrantExpenses":actors.getData(i,'loanedMigrantExpenses'),
        	"chargedMigrantExpenses":actors.getData(i,'chargedMigrantExpenses'),
        	"migrantDebt":actors.getData(i,'migrantDebt'),
        	"value":"1"
        });
    }

}


function addConnectionsToNetwork(connections,network){
    for(var i = 0; i < connections.getCount(); i++){
        var sid = connections.getData(i,'actorSource');
        var tid  = connections.getData(i,'actorTarget');
        var payment = connections.getData(i,'toMigra');

        network.links.push({
        	"source": sid,
        	"target":tid,
        	"value":"1"
        });
    }
}


function drawViz(network){

	link = zoomLayer.append("g")
		.attr("class", "links")
		.selectAll("g")
		.data(network.links)
		.enter().append("g")
		.attr("data-source", function(d) { return d.source;})
		.attr("data-target", function(d) { return d.target;})
		.attr("data-paidMigrantExpenses", function(d) { return d.paidMigrantExpenses;})
		.attr("data-chargedMigrantExpenses", function(d) { return d.chargedMigrantExpenses;})
		.attr("data-loanedMigrantExpenses", function(d) { return d.loanedMigrantExpenses;})
		.attr("data-migrantDebt", function(d) { return d.migrantDebt;})
		.append("line")
		.attr("stroke-width", function(d) { return Math.sqrt(d.value); })

	paymentsToMigrants = d3version4.selectAll("[data-paidMigrantExpenses=yes],[data-loanedMigrantExpenses=yes]")
		.append("line")
		.attr('data-payment','true')
		.attr('data-paidMigrantExpenses','yes')
		.attr('data-loanedMigrantExpenses','yes');
	
	paymentsFromMigrants = d3version4.selectAll("[data-chargedMigrantExpenses=yes],[data-migrantDebt=yes]")
		.append("line")
		.attr('data-payment','true')
		.attr('data-chargedMigrantExpenses','yes')
		.attr('data-migrantDebt','yes');

	// ===================================================================================================
	
	node = zoomLayer.append("g")
		.attr("class", "nodes")
		.selectAll("g")
		.data(network.nodes)
		.enter().append("g")
		.attr("data-type",function(d){return d.type;})
		.attr("data-chargedMigrantExpenses",function(d){return d.chargedMigrantExpenses;})
		.attr("data-paidMigrantExpenses",function(d){return d.paidMigrantExpenses;})
		.attr("data-loanedMigrantExpenses",function(d){return d.loanedMigrantExpenses;})
		.attr("data-migrantDebt",function(d){return d.migrantDebt;})
		.attr("data-previousRecruiter",function(d){return d.previousRecruiter;})
		.attr("data-brokerForMigrant",function(d){return d.brokerForMigrant;})
		.attr("data-agentForMigrant",function(d){return d.agentForMigrant;})
		.attr("data-recruiterAgentForMigrant",function(d){return d.recruiterAgentForMigrant;})
		.attr("data-traffickerForMigrant",function(d){return d.traffickerForMigrant;})
		.attr("data-kwoswungForMigrant",function(d){return d.kwoswungForMigrant;})
        .attr("data-previousSmugglerOrTransporter",function(d){return d.previousSmugglerOrTransporter;})
        .attr("data-smugglerOrTransporterForMigrant",function(d){return d.smugglerOrTransporterForMigrant;})
		.attr("data-firstEmployer",function(d){return d.firstEmployer;})
		.attr("data-employer",function(d){return d.employer;})			
		.attr("data-id",function(d){return d.id;})
		.attr("data-name",function(d){return d.name;})
		.attr("data-age",function(d){return d.age;})
		.attr("data-remittances",function(d){return d.remittances;})
		.attr("data-coMigration",function(d){return d.coMigration;})
		.attr("data-ageApproximate",function(d){return d.ageApproximate;})
		.attr("data-ageBirthYearMyanmar",function(d){return d.ageBirthYearMyanmar;})
		.attr("data-ageBirthYearThailand",function(d){return d.ageBirthYearThailand;})
		.attr("data-ageBirthYearEnglish",function(d){return d.ageBirthYearEnglish;})
		.attr("data-gender",function(d){return d.gender;})
		.attr("data-relationshipToMigrant",function(d){return d.relationshipToMigrant;})
		.attr("data-personalMattersDiscussionFrequency",function(d){return d.personalMattersDiscussionFrequency;})
		.attr("data-relationalWealth",function(d){return d.relationalWealth;})
		.attr("data-firstSuggestion",function(d){return d.firstSuggestion;})
		.attr("data-neededPermission",function(d){return d.neededPermission;})
		.attr("data-wantedBlessing",function(d){return d.wantedBlessing;})
		.attr("data-finalDecision",function(d){return d.finalDecision;})
		.attr("data-encouragement",function(d){return d.encouragement;})
		.attr("data-discouragement",function(d){return d.discouragement;})
		.attr("data-migrationModeller",function(d){return d.migrationModeller;})
		.attr("data-refuseReaction",function(d){return d.refuseReaction;})
		.attr("data-generalInformation",function(d){return d.generalInformation;})
		.attr("data-arrangedMigration",function(d){return d.arrangedMigration;})
		.attr("data-arrangedDestination",function(d){return d.arrangedDestination;})
		.attr("data-arrangedWork",function(d){return d.arrangedWork;})
		.attr("data-arrangedContractBefore",function(d){return d.arrangedContractBefore;})
		.attr("data-arrangedContractAfter",function(d){return d.arrangedContractAfter;})
		.attr("data-arrangedTravelDocumentation",function(d){return d.arrangedTravelDocumentation;})
		.attr("data-arrangedTransportation",function(d){return d.arrangedTransportation;})
		.attr("data-arrangedAccommodation",function(d){return d.arrangedAccommodation;})
		.attr("data-predepartureDiscussionPersonInThailand",function(d){return d.predepartureDiscussionPersonInThailand;})
		.attr("data-honestFeelings",function(d){return d.honestFeelings;})
		.attr("data-alsoAttendedTrainings",function(d){return d.alsoAttendedTrainings;})
		.attr("data-inTransitHelp",function(d){return d.inTransitHelp;})
		.attr("data-unnamedImportantPlanners",function(d){return d.unnamedImportantPlanners;})
		.attr("data-myanmarNational",function(d){return d.myanmarNational;})
		.attr("data-thailandNational",function(d){return d.thailandNational;})
		.attr("data-sameEthnicity",function(d){return d.sameEthnicity;})
		.attr("data-migratedThailandBeforeMigrant",function(d){return d.migratedThailandBeforeMigrant;})
		.attr("data-migratedThailandAfterMigrant",function(d){return d.migratedThailandAfterMigrant;})
		.attr("data-currentlyInThailand",function(d){return d.currentlyInThailand;})
		.attr("data-arrangedForOthers",function(d){return d.arrangedForOthers;})
		.attr("data-seekHelpAgain",function(d){return d.seekHelpAgain;})
		.attr("data-mostValuableHelp",function(d){return d.mostValuableHelp;})
		.attr("data-causedProblems",function(d){return d.causedProblems;})
		.attr("data-expectationsDestination",function(d){return d.expectationsDestination;})
		.attr("data-expectationsWorkType",function(d){return d.expectationsWorkType;})
		.attr("data-expectationsJobSite",function(d){return d.expectationsJobSite;})
		.attr("data-expectationsCompanyName",function(d){return d.expectationsCompanyName;})
		.attr("data-expectationsLivingArrangements",function(d){return d.expectationsLivingArrangements;})
		.attr("data-expectationsAmountPaid",function(d){return d.expectationsAmountPaid;})
		.attr("data-expectationsOftenPaid",function(d){return d.expectationsOftenPaid;})
		.attr("data-expectationsWorkingHours",function(d){return d.expectationsWorkingHours;})
		.attr("data-expectationsOvertimeHours",function(d){return d.expectationsOvertimeHours;})
		.attr("data-expectationsOvertimePay",function(d){return d.expectationsOvertimePay;})
		.attr("data-expectationsTimeOff",function(d){return d.expectationsTimeOff;})
		.attr("data-expectationsLawfulDeductions",function(d){return d.expectationsLawfulDeductions;})
		.attr("data-expectationsForeignWorkerRights",function(d){return d.expectationsForeignWorkerRights;})
		.attr("data-expectationsContractDuration",function(d){return d.expectationsContractDuration;})
		.attr("data-expectationsEarlyTerminationPenalties",function(d){return d.expectationsEarlyTerminationPenalties;})
		.attr("data-expectationsRecruitmentFees",function(d){return d.expectationsRecruitmentFees;})
		.attr("data-expectationsTransportationCosts",function(d){return d.expectationsTransportationCosts;})
		.attr("data-expectationsTransportationPlan",function(d){return d.expectationsTransportationPlan;})
		.attr("data-expectationsTransportationDocumentationPlan",function(d){return d.expectationsTransportationDocumentationPlan;})
		.attr("data-expectationsTransportationDocumentationCosts",function(d){return d.expectationsTransportationDocumentationCosts;})
		.attr("data-deductions",function(d){return d.deductions;})
		.attr("data-lockedInRoom",function(d){return d.lockedInRoom;})
		.attr("data-refusedOvertimePay",function(d){return d.refusedOvertimePay;})
		.attr("data-limitedBreaks",function(d){return d.limitedBreaks;})
		.attr("data-workWhenSick",function(d){return d.workWhenSick;})
		.attr("data-dangerousWork",function(d){return d.dangerousWork;})
		.attr("data-workedLonger",function(d){return d.workedLonger;})
		.attr("data-restrictedMovement",function(d){return d.restrictedMovement;})
		.attr("data-threatenNoPay",function(d){return d.threatenNoPay;})
		.attr("data-threatenDismissal",function(d){return d.threatenDismissal;})
		.attr("data-takenPassport",function(d){return d.takenPassport;})
		.attr("data-threatenInjury",function(d){return d.threatenInjury;})
		.attr("data-damagedBelongings",function(d){return d.damagedBelongings;})
		.attr("data-slappedHitThrowSomething",function(d){return d.slappedHitThrowSomething;})
		.attr("data-pushedKickedBeaten",function(d){return d.pushedKickedBeaten;})
		.attr("data-tiedUpChoked",function(d){return d.tiedUpChoked;})
		.attr("data-threatenWeaponUse",function(d){return d.threatenWeaponUse;})
		.attr("data-burnYou",function(d){return d.burnYou;})
		.attr("data-forcedSex",function(d){return d.forcedSex;})
		.attr("data-forcedSubstances",function(d){return d.forcedSubstances;});
	

	attributeInitial()


	migrants = d3version4.selectAll("[data-type=migrant]");
	nonBrokers = d3version4.selectAll("[data-type=nonBroker]");
	brokers = d3version4.selectAll("[data-type=broker]");
	employers = d3version4.selectAll("[data-type=employer]");

	// ===================================================================================================	 

	circles = node.append("circle")
		.attr("r", 15)
		.call(d3version4.drag()
		.on("start", dragstarted)
		.on("drag", dragged)
		.on("end", dragended));

	brokeRings = brokers.append("circle")
		.attr('r',23)
		.attr('data-broker','true')
		.attr('fill-opacity',0)
		.call(d3version4.drag()
		.on("start", dragstarted)
		.on("drag", dragged)
		.on("end", dragended));

	employerBrokeRings = employers.append("circle")
		.attr('r',23)
		.attr('data-broker','true')
		.attr('fill-opacity',0)
		.call(d3version4.drag()
		.on("start", dragstarted)
		.on("drag", dragged)
		.on("end", dragended));

	employerRings = employers.append("circle")
		.attr('r',35)
		// .attr('r',23)
		.attr('data-employer','true')
		.attr('fill-opacity',0)
		.call(d3version4.drag()
		.on("start", dragstarted)
		.on("drag", dragged)
		.on("end", dragended));

	lables = node.append("text")
		.text(function(d) {
			return d.name;
		})
		.attr('x', function(d){
			if(d.type == 'employer'){
				return 40;
			}
			else if(d.type == 'broker' || d.type == 'migrant'){
				return 25; 
			} else{
				return 15;
			}
		})
		.attr('y', 20);

	node.append("title")
		.text(function(d){
			return d.name;
		});



	// ===================================================================================================

	simulation
		.nodes(network.nodes)
		.on("tick", ticked);

	simulation.force("link")
		.links(network.links);

	function ticked() {
		link
			.attr("x1", function(d) { return d.source.x; })
			.attr("y1", function(d) { return d.source.y; })
			.attr("x2", function(d) { return d.target.x; })
			.attr("y2", function(d) { return d.target.y; });
		paymentsFromMigrants 
			.attr("x1", function(d) { return (d.target.x+d.source.x)/2; })
			.attr("y1", function(d) { return (d.target.y+d.source.y)/2; })
			.attr("x2", function(d) { return d.source.x; })
			.attr("y2", function(d) { return d.source.y; })
		paymentsToMigrants
			.attr("x1", function(d) { return (d.target.x+d.source.x)/2; })
			.attr("y1", function(d) { return (d.target.y+d.source.y)/2; })
			.attr("x2", function(d) { return d.target.x; })
			.attr("y2", function(d) { return d.target.y; })
		employerRings
			.attr("x", -25)
			.attr("y", -25)
			.attr("height",50)
			.attr("width",50);
		node
			.attr("transform", function(d) {
			  return "translate(" + d.x + "," + d.y + ")";
			});
	}

	function dragstarted(d) {
	  if (!d3version4.event.active) simulation.alphaTarget(0.3).restart();
	  d.fx = d.x;
	  d.fy = d.y;
	}

	function dragged(d) {
	  d.fx = d3version4.event.x;
	  d.fy = d3version4.event.y;
	}

	function dragended(d) {
	  if (!d3version4.event.active) simulation.alphaTarget(0);
	  d.fx = null;
	  d.fy = null;
	}

	var zoomed = function() {
	  zoomLayer.attr("transform", d3version4.event.transform);
	}

	svg.call(d3version4.zoom()
		.scaleExtent([1 / 2, 12])
		.on("zoom", zoomed));


}



var connectionsCtxt = {
    failure: function(error) {console.log('error: '+error.message)},  
    success: function(result) {
		
		// ===================================================================================================

        connectionResultSet = result;
        var numOfConnections = connectionResultSet.getCount();
        console.log(numOfConnections + " connections in " + [migrant] + "'s network");

        addConnectionsToNetwork(connectionResultSet,dataset);
		
		// ===================================================================================================
		

		drawViz(dataset);

		// selecting a nodef
		$(".nodes g[data-type=nonBroker],.nodes g[data-type=broker],.nodes g[data-type=employer]").on("click",function(){
			console.log("click")
			attributeUpdater($(this));
		});
	}
};









d3version3 = d3
window.d3 = null

// load database and d3 first
require(['database',"{{expandFormDirRelativeUrlPath 'd3.js'}}"], function(database,d3){
 	// Defering in hopes that the template fully loads before the script runs.
 	_.defer(function() {   
 		d3version4 = d3
	    window.d3 = null

	    // START VIZ

		svg = d3version4.select("svg"),
     	width = +svg.attr("width"),
     	height = +svg.attr("height");
 		zoomLayer  = svg.append("g");
 
		color = d3version4.scaleOrdinal(d3version4.schemeCategory20);

        simulation = d3version4.forceSimulation()
            .force("link", d3version4.forceLink().id(function(d) { return d.id; }))
            .force("charge", d3version4.forceManyBody().strength(-3500).distanceMax(3500).distanceMin(10))
            .force("center", d3version4.forceCenter(width / 2, height / 2));



        // globalize migrant data
        migrantResult = database;
		migrant = database.getDataValue('migrantId');

		//add migrant to network
		dataset.nodes.push({
			"id":migrant,
			"name": migrant,
			"type": "migrant",
			"previousMigration":"yes",
			"stages":"decision how destination transit coordination"
		});

		// add migrant's actors to network
        odkData.arbitraryQuery(
        	'actor',
        	'select * from actor where migrantId = ?',
        	[migrant],
        	null,
        	null,
        	actorsCtxt.success,
        	actorsCtxt.failure
        );


	})
})




</script>
